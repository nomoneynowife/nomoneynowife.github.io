<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[樱花舞乱我心的博客]]></title>
  <link href="http://nomoneynowife.github.io/atom.xml" rel="self"/>
  <link href="http://nomoneynowife.github.io/"/>
  <updated>2014-05-24T00:04:10+08:00</updated>
  <id>http://nomoneynowife.github.io/</id>
  <author>
    <name><![CDATA[nomoneynowife]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PHP中的设计模式：单例模式]]></title>
    <link href="http://nomoneynowife.github.io/blog/2014/05/23/design-patterns-in-php-singletons/"/>
    <updated>2014-05-23T23:30:14+08:00</updated>
    <id>http://nomoneynowife.github.io/blog/2014/05/23/design-patterns-in-php-singletons</id>
    <content type="html"><![CDATA[<p>原文链接：<a href="">http://coderoncode.com/2014/01/27/design-patterns-php-singletons.html</a>
<a href="http://coderoncode.com/2014/01/27/design-patterns-php-singletons.html">http://coderoncode.com/2014/01/27/design-patterns-php-singletons.html</a></p>

<p>单例模式用于限制类实例化到单个对象，当整个系统只需要一个对象时这将有用。</p>

<p>单例模式被设计来确保只有一个单一的(因此得名单例)类实例，并且有一个全局的访问点。通过这个单一实例我们有一个全局的访问点并且可以延迟初始化。</p>

<p>一个基本的单例实现看起来像下面的例子：</p>

<pre><code>&lt;?php

/** Example taken from http://www.webgeekly.com/tutorials/php/how-to-create-a-singleton-class-in-php/ **/

class User
{
    // Hold an instance of the class
    private static $instance;

    // The singleton method      
    public static function singleton()
    {
        if (!isset(self::$instance)) {
            self::$instance = new __CLASS__;
        }
        return self::$instance;
    }
 }

 $user1 = User::singleton();
 $user2 = User::singleton();
 $user3 = User::singleton();

 ?&gt;
</code></pre>

<p>在上面的例子中3个变量都指向同一个对象。第一次调用会实例化出一个对象，而后续的调用都只返回该对象。</p>

<blockquote><p>“在计算机编程中，延迟初始化是一种策略，直到第一次需要时才会去创建一个对象、计算一个值或者其他昂贵的过程。”</p></blockquote>

<p>让我们看看显而易见而又被忽略的事实，并且讲讲为什么单例模式被许多开发者认为是一种“反模式”，尽管这么讲要高度依赖于所使用的框架和语言，然而PHP中的单例模式几乎被普遍认为是一种“反模式”。</p>

<p><em>单例模式被许多人认为是一种反模式，反模式是一种解决方案，但是这种解决方案往往是无效的，甚至会带来高风险的反作用。</em></p>

<h2>单例模式是来自地狱的卵？</h2>

<p>如果你之前读到过单例模式，你可能想知道到底我在表达什么？</p>

<p>单例模式是邪恶的，是一种“反模式”，并且绝不能使用它。光说<a href="http://c2.com/cgi/wiki?SingletonsAreEvil" title="Singletons Are Evil">单例模式是邪恶的</a>还仅仅不够，我们需要知道为什么需要避免使用单例模式，这正是我想在这篇文章中阐明的。</p>

<p>单例模式被认为是一种“反模式”有几个原因，让我们来看看其中的一些原因：</p>

<h2>单一职责模式</h2>

<p>我们使用单一模式所面对的第一个问题便是：它的使用打破了单一职责原则。</p>

<p>单例对象有着用途和控制生产出的实例数量这两个职责，而单一职责原则则指出：每个类应该只有一个职责，并且这个职责应该由类来完全封装。</p>

<h2>隐藏的依赖关系</h2>

<p>什么是隐藏的依赖关系，以及这和单例模式是如何有关的？如果你看过我之前的有关<a href="http://coderoncode.com/2014/01/06/dependency-injection-php.html" title="Playing with dependency injection in PHP">依赖注入</a>的文章，我们看到了如何把依赖关系通过参数传递给函数。</p>

<p>一个函数接收到的任何参数称为可见的依赖。另一方面，如果一个函数需要一个类似全局变量的东西(读取单例)来运作，那么这种依赖被认为是隐藏的。</p>

<p>这表明，如果不去看实际函数的实现的话，那么第三方是没有办法知道这个隐藏的依赖关系的。</p>

<blockquote><p>“一个可见的依赖是一种开发者可以从类的接口看见到的依赖。如果一个依赖不能从类的接口看见的话，那么这个依赖就是一个隐藏的依赖”—<a href="http://tutorials.jenkov.com/ood/understanding-dependencies.html#visiblehidden">jenkov.com</a></p></blockquote>

<h2>测试</h2>

<p>伴随着这些问题，当我们对我们的应用程序进行单元测试是会有一个问题。合适的单元测试应该能像数据库那样独立地运行。单例模式让单元测试即使不是不可能的也会是困难的，因为单例模式有一个全局的状态。</p>

<p>这意味着，一旦实例化，那么这个实例便会仅仅围绕着这个单元测试。这可能会导致测试中意外地相互影响。</p>

<p>有个变通方法，那就是每次测试运行后好好地“清理”单例，然而我发现这仍然是生产上的禁忌并且很麻烦。</p>

<h2>并不全是坏事，不是吗？</h2>

<p>它们不能全是坏事，不是吗？好吧，让我们试着辩论下单例模式的好处和某些情况下它们是有用的：</p>

<ul>
<li><p> <em>调试日志：</em>几乎所有的开发者都同意调试日志记录这种方式应该适用于每一个功能和每一部分的代码。单例模式可以在不伤害可读性、可测试性及可维护性上达到这个目的。</p></li>
<li><p> <em>文件系统和数据库访问：</em>访问文件系统和数据库用单例模式是由理由的，如果你需要一个文件系统或者数据库的全局访问点，单例模式在提供灵活性和可测试性上会小有帮助，这是有用的。</p></li>
</ul>


<h2>结论</h2>

<p>单例模式、“反模式”和设计模式一般来讲并不是好的或者坏的。是什么让单例模式变成一个“反模式”并不是因为模式本身，而是因为单例模式往往很容易地被人们很差地实现。</p>

<p>如果被不正确地实现(这是经常发生的)，任何模式都可能变成“反模式”。话虽这么说，就现代的PHP和现代的框架来说很难有赞成单例模式的情况。就我个人而言，对于单例模式，我看不出它有什么好处，恰恰看到了它有许多的缺点。</p>

<p><em>最后我明白的一点是，单例模式是一个有争议和偏见的话题。如果你有想补充任何在这篇文章中提到的观点，或者能提供有用的案例，我非常想看到你们在文章后面的评论。</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HVVM简介(译)]]></title>
    <link href="http://nomoneynowife.github.io/blog/2014/05/23/an-introduction-to-hhvm/"/>
    <updated>2014-05-23T00:32:03+08:00</updated>
    <id>http://nomoneynowife.github.io/blog/2014/05/23/an-introduction-to-hhvm</id>
    <content type="html"><![CDATA[<p>原文链接：<a href="http://coderoncode.com/2013/07/24/introduction-hhvm.html">http://coderoncode.com/2013/07/24/introduction-hhvm.html</a></p>

<blockquote><p>HHVM(HIpHop Virtual Machina)把PHP代码转换成高层次的字节码(普遍认为是一种中间语言)。然后这样的字节码在运行时被JIT(just-in-time)编译器动态地转换成x64机器码。基于这样的考虑，HHVM和包括C#/CLR和Java/JVM在内的其他语言中的虚拟机类似。</p></blockquote>

<h2>有点长的历史</h2>

<p>在2008年早期Facebook网站便工作在HipHop(一个PHP执行引擎，现在是HPHP)上。其原始的动机便是把Facebook网站中大量的PHP代码转换成C++代码，以便节约资源和提升应用性能。其原始版本便是HPHPc(一个把PHP代码转换成C++代码的编译器)。</p>

<p>在接下来的两年时间里Facebook网站继续工作在HipHop上，这时候的HipHop增加了HPHPi(一个HPHP的”开发模式”版本)和HPHPd(HipHop debugger)。运行在HipHop平台上的PHP应用程序允许开发者查看和单步执行代码并且可以交互式地调试。</p>

<p>在巅峰时期，运行在HipHop上的PHP代码在性能上是运行在ZEND引擎上的PHP代码的6倍。然而，在HipHop的第一次迭代版上仍然有几个缺点:</p>

<ul>
<li>HPHPc不是完全的支持PHP语言，最明显的便是不支持create_function和eval这两个函数。诚然，我并不认为对于不支持eval这个函数是件坏事。</li>
<li>Facebook的开发者必须维护两个不同的引擎(HPHPc和HPHPi)，这样的结果便是导致重复的工作和浪费资源。</li>
<li>最后，HPHPc需要完全不同的部署过程，这样会妨碍到它被PHP开发者所采纳。</li>
</ul>


<p>鉴于这些问题，Facebook公司在2010年早期采取了两个关键行动。其一便是把HipHop平台开源了，开源这样的一个项目是一个伟大的方式，便于构建一个围绕着这个项目的社区并且可以从社区中获取到来自外界的帮助。其二，Facebook公司开始了HipHop在现代版本上的发展，这便是HHVM(HipHop virtual Machine)。HHVM提升了HPHPc的健壮性并且修正了许多关键性的问题。</p>

<p>HHVM建立在HPHPc的顶端，其工作方式便是把PHP代码转换成高层次的字节码(一种中间语言)。这样的字节码在运行时被JIT(Just-In-Time)编译器动态地转换成机器码。</p>

<p>如果你像我一样，你可能对字节码、机器码和Just-In-Time编译器还有着模糊的记忆。所以，让我们暂时偏离一下主题快速地回顾下这些概念，然后讲解下他们是如何在HHVM中扮演关键性的角色。</p>

<h2>字节码、机器码以及JIT，哦，我的…!</h2>

<ul>
<li><p>字节码：它是一个人们读不懂的代码，被设计来让解释器或者编译器高效执行的。当HHVM第一次导入我们的项目，它把所有的PHP代码转换成字节码这样的中间形式。产生的字节码和特定类型的计算机结构无关，因此可以很方便地在不同的系统间移植。</p></li>
<li><p>机器码：它是一组被设计成可以由CPU直接执行的指令。如果你曾经玩过Assembly(谁没玩过呢？)，你一定能很好的理解什么是机器码。对于没有兴趣玩assembly或者类似语言的极少数的你们来说，机器码是由编译器或者解释器产生的并且可以直接被CPU执行的代码。</p></li>
<li><p>JIT(Just In Time)编译器：Just in time编译技术是用来提升软件性能的一项技术。它的实现原理便是在执行期间编译存储在内存中字节码，JIT编译器导入这些字节码并且编译成所需要的部分。</p></li>
</ul>


<p>通过应用这些技术所获得的性能和速度便能给HipHop及随后的HHVM提供核心优势。保持一个PHP代码库，同时实现性能上堪比编译过的应用程序。</p>

<p>目前的HHVM基本上支持整个的PHP5.4版本，然而HHVM仍然有妨碍到一些应用程序执行的许多bugs。基于这样的原因，Facebook公司设置的目标便是能让开源的顶尖的前20个PHP应用程序运行在HHVM上。第一个运行在其上的最流行的应用便是Wordpress。</p>

<h2>接下来</h2>

<p>现在我们对于HHVM究竟是做什么的及其优势有了很好的了解，并且对于运行在其上的应用程序我们可以很方便的开始测试了。在接下来的文章里，我会介绍到如何在虚拟机上安装HHVM，以及在你的应用程序上运行基准测试，最后(双手合十)，介绍如何在HHVM上运行Magento。</p>
]]></content>
  </entry>
  
</feed>
